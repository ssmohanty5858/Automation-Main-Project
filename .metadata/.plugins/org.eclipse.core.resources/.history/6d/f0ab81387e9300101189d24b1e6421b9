package listeners;

import org.openqa.selenium.WebDriver;
import org.testng.*;
import org.testng.internal.ConstructorOrMethod;

import util.NetworkConsoleRecorder;
import util.ReporterConsoleBridge;

import java.io.File;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.nio.file.Path;
import java.nio.file.Paths;

public class PerMethodRecorderListener implements IInvokedMethodListener, ISuiteListener {

private static final ThreadLocal<NetworkConsoleRecorder> REC = new ThreadLocal<>();

		
		@Override public void onStart(ISuite suite) { Reporter.setEscapeHtml(false); }

		@Override
		public void beforeInvocation(IInvokedMethod invoked, ITestResult result) {
			if (!invoked.isTestMethod()) return;                 // only wrap @Test methods

			WebDriver driver = resolveDriver(result.getInstance());
			if (driver == null) return;

			ConstructorOrMethod cm = invoked.getTestMethod().getConstructorOrMethod();
			Method m = cm.getMethod();
			String cls = m.getDeclaringClass().getSimpleName();
			String name = m.getName();
			String ts = new java.text.SimpleDateFormat("yyyyMMdd_HHmmss").format(new java.util.Date());


			Path logsRoot = Paths.get(System.getProperty("logs.dir", "logs")).toAbsolutePath();
			String baseName = cls + "_" + name + "_" + ts;       // per-method, unique

			NetworkConsoleRecorder rec = new NetworkConsoleRecorder(driver, logsRoot, baseName);
			rec.start();
			REC.set(rec);
}

		@Override
		public void afterInvocation(IInvokedMethod invoked, ITestResult result) {
			if (!invoked.isTestMethod()) return;

			NetworkConsoleRecorder rec = REC.get();
			if (rec == null) return;

			try {
				rec.stop(); // files are now written
   
				Path api = rec.getNetworkFile();
				Path con = rec.getConsoleFile();

				ReporterConsoleBridge.logArtifact("Open API/UI calls", api);
				ReporterConsoleBridge.logArtifact("Open Console",      con);

			   // // Option B: explicit anchors (uncomment if you want)
			   // Reporter.log(anchor("Open API/UI calls", api), true);
			   // Reporter.log(anchor("Open Console",      con), true);

				}finally {
	 			REC.remove();
 				}
}

				private static String anchor(String label, Path file) {
				 if (file == null) return "";
				 Path outRoot = Paths.get(System.getProperty("testng.report.output", "test-output")).toAbsolutePath();
				 Path abs = file.toAbsolutePath();
				 String href;
				 try {
				   href = outRoot.relativize(abs).toString().replace(File.separatorChar, '/');
				 } catch (IllegalArgumentException e) {
				   href = abs.toUri().toString(); // different drive: file:// fallback
				 }
				 return "<a target='_blank' rel='noopener' href='" + href + "'>" + label + "</a>";
				}
				
				/** Find a WebDriver field on the test instance (no changes to your tests/POMs). */
				private WebDriver resolveDriver(Object instance) {
				 if (instance == null) return null;
				 Class<?> c = instance.getClass();
				 while (c != null) {
				   for (Field f : c.getDeclaredFields()) {
				     if (WebDriver.class.isAssignableFrom(f.getType())) {
				       try { f.setAccessible(true); Object v = f.get(instance); if (v instanceof WebDriver) return (WebDriver) v; }
				       catch (IllegalAccessException ignored) {}
				     }
				   }
				   c = c.getSuperclass();
				 }
				 return null;
				}
}
