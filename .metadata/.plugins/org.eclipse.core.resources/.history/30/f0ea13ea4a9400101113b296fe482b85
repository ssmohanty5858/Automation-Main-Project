package util;

import org.testng.IReporter;
import org.testng.ISuite;
import org.testng.ISuiteResult;
import org.testng.ITestContext;
import org.testng.ITestResult;
import org.testng.xml.XmlSuite;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.*;

public class EmailableFailureReportWithLogs implements IReporter {

    @Override
    public void generateReport(List<XmlSuite> xmlSuites, List<ISuite> suites, String outputDirectory) {
        List<ITestResult> allResults = collectResults(suites);
        List<ITestResult> failedResults = filterFailures(allResults);
        if (!failedResults.isEmpty()) {
            writeFailureHtmlReport(failedResults, outputDirectory + "/failures-report.html");
        }
    }

    private List<ITestResult> collectResults(List<ISuite> suites) {
        List<ITestResult> results = new ArrayList<>();
        for (ISuite suite : suites) {
            Map<String, ISuiteResult> suiteResults = suite.getResults();
            for (ISuiteResult suiteResult : suiteResults.values()) {
                ITestContext testContext = suiteResult.getTestContext();
                results.addAll(testContext.getPassedTests().getAllResults());
                results.addAll(testContext.getFailedTests().getAllResults());
                results.addAll(testContext.getSkippedTests().getAllResults());
            }
        }
        return results;
    }

    private List<ITestResult> filterFailures(List<ITestResult> results) {
        List<ITestResult> failed = new ArrayList<>();
        for (ITestResult r : results) {
            if (r.getStatus() == ITestResult.FAILURE) {
                failed.add(r);
            }
        }
        return failed;
    }

    private void writeFailureHtmlReport(List<ITestResult> failedResults, String fileName) {
        try (BufferedWriter w = new BufferedWriter(new FileWriter(fileName))) {
            // Write header and styles (copy your customized style exactly)
            w.write("<html><head><title>Failed Tests Report</title>");
            w.write("<style>");
            w.write("body { font-family: Segoe UI, system-ui, Arial, sans-serif; margin: 18px; color: #0f172a; background: #fafafa; }");
            w.write("table { border-collapse: collapse; width: 100%; background: #fff; border-radius: 10px; overflow: hidden; box-shadow: 0 1px 2px rgba(0,0,0,0.04); }");
            w.write("th, td { border: 1px solid #e6e6e6; padding: 10px; vertical-align: top; font-size: 14px; }");
            w.write("th { background: #f4f6f8; text-transform: uppercase; font-size: 12px; letter-spacing: 0.04em; color: #334155; }");
            w.write("tr:nth-child(even) { background: #f9f9f9; }");
            w.write("</style>");
            w.write("</head><body>");

            w.write("<h1>Failure Test Result Report</h1>");
            w.write("<table>");
            w.write("<thead><tr>");
            w.write("<th>#</th><th>Class</th><th>Method</th><th>Status</th><th>Start</th><th>End</th><th>Duration (ms)</th><th>Logs</th><th>Error</th>");
            w.write("</tr></thead><tbody>");

            int idx = 1;
            for (ITestResult r : failedResults) {
                w.write("<tr>");
                w.write("<td>" + idx++ + "</td>");
                w.write("<td>" + esc(r.getTestClass().getName()) + "</td>");
                w.write("<td>" + esc(r.getMethod().getMethodName()) + "</td>");
                w.write("<td><span style='color: red; font-weight: bold;'>Failed</span></td>");
                w.write("<td>" + new Date(r.getStartMillis()) + "</td>");
                w.write("<td>" + new Date(r.getEndMillis()) + "</td>");
                w.write("<td>" + (r.getEndMillis() - r.getStartMillis()) + "</td>");
                w.write("<td>" + getLogsHtml(r) + "</td>");
                w.write("<td>" + esc(getErrorMessage(r)) + "</td>");
                w.write("</tr>");
            }

            w.write("</tbody></table>");
            w.write("</body></html>");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Example method: Fetch logs HTML similar to your original report logic
    private String getLogsHtml(ITestResult r) {
        // Retrieve logs associated with the test result (customize as per your Log.java or logging framework)
        // For now, just returning a placeholder or empty
        return "## Logs (not implemented)";
    }

    private String esc(String s) {
        if (s == null) return "";
        return s.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;");
    }

    private String getErrorMessage(ITestResult r) {
        Throwable t = r.getThrowable();
        return t == null ? "" : t.getMessage();
    }
}
