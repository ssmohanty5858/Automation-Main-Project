package util;

import java.io.BufferedReader;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.*;

/**
 * Simple CSV reader for header-based CSVs (comma or semicolon; trims cells).
 * Keeps row order to allow grouped iteration by Des Name.
 */
public final class CSVReader {

    private CSVReader() {}

    public static List<Map<String,String>> read(Path path) throws IOException {
        try (BufferedReader br = Files.newBufferedReader(path, StandardCharsets.UTF_8)) {
            String headerLine = nextDataLine(br);
            if (headerLine == null) return List.of();

            String[] headers = split(headerLine);
            for (int i = 0; i < headers.length; i++) headers[i] = headers[i].trim();

            List<Map<String,String>> rows = new ArrayList<>();
            String line;
            while ((line = nextDataLine(br)) != null) {
                String[] cells = split(line);
                Map<String,String> row = new LinkedHashMap<>();
                for (int i = 0; i < headers.length; i++) {
                    String key = headers[i];
                    String val = i < cells.length ? cells[i].trim() : "";
                    row.put(key, val);
                }
                rows.add(row);
            }
            return rows;
        }
    }

    private static String[] split(String line) {
        // supports either comma or semicolon
        String sep = line.indexOf(';') >= 0 ? ";" : ",";
        return line.split(sep, -1);
    }

    private static String nextDataLine(BufferedReader br) throws IOException {
        String s;
        while ((s = br.readLine()) != null) {
            s = s.trim();
            if (s.isEmpty()) continue;
            if (s.startsWith("#")) continue;
            // ignore ASCII separators like "----"
            if (s.matches("[-\\s]+")) continue;
            return s;
        }
        return null;
    }
}
